name: Release Pipeline

run-name: "Releasing ${{ github.event.repository.name }} #${{github.run_number}}"

# Trigger workflow manually
on:
  workflow_dispatch:
    inputs:
      release_message:
        type: string
        description: "(Optional) Enter Release Message"

# Define environment parameters
env:
  BRANCH_NAME: ${{github.ref_name}}
  TRUNK_BRANCH_NAME: main
  RELEASE_MESSAGE: ${{github.event.input.release_message}}

# Define jobs within the workflow
jobs:
  initialization:
    runs-on: ubuntu-latest
    name: Initialization
    outputs:
      NEXT_SNAPSHOT_VERSION: ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}
      RELEASE_VERSION: ${{steps.splitCurrentVersion.outputs._0}}

    steps:
      - name: Verify Branch
        if: env.BRANCH_NAME != env.TRUNK_BRANCH_NAME
        run: |
          echo "ERROR: Attempting to release from branch ${{env.BRANCH_NAME}}. Release from ${{env.TRUNK_BRANCH_NAME}} branch only"
          exit 1

      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Get Current Version
        run: |
          echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print Version
        run: echo ${{env.POM_VERSION}}

      - name: Verify Is SNAPSHOT Version
        if: ${{ !contains(env.POM_VERSION, '-SNAPSHOT')}}
        run: |
          echo "ERROR: Version is set to incompatible version ${{env.POM_VERSION}}. Only SNAPSHOT development versions can be converted to a release version."
          exit 1

      - name: Split version code
        uses: xom9ikk/split@v1
        id: splitCurrentVersion
        with:
          string: ${{env.POM_VERSION}}
          separator: -SNAPSHOT
          limit: -1

      - name: Split version code - Separate By .
        uses: xom9ikk/split@v1
        id: splitVersionMinor
        with:
          string: ${{steps.splitCurrentVersion.outputs._0}}
          separator: .
          limit: -1

      - name: Increment Snapshot Version
        id: nextSnapshotVersion
        run: |
          echo "SnapshotVersion=${{steps.splitVersionMinor.outputs._0}}.$((${{steps.splitVersionMinor.outputs._1}} + 1)).${{steps.splitVersionMinor.outputs._2}}-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Print Information
        run: |
          echo "Branch Name -- #{{env.BRANCH_NAME}}"
          echo "Release Version -- ${{steps.splitCurrentVersion.outputs._0}}"
          echo "Snapshot Version -- ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}"

  #Setting versioning for build and tags
  set_build_and_tag_release:
    runs-on: ubuntu-latest
    needs: initialization
    name: Set, Build & Tag Release Version
    permissions:
      contents: write

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set Release Version
        run: |
          mvn -B versions:set \
          -DnewVersion=${{needs.initialization.outputs.RELEASE_VERSION}} \
          -DgenerateBackupPoms=false

      - name: Build Release Version
        run: |
          mvn -version
          mvn clean install

      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{needs.initialization.outputs.RELEASE_VERSION}}',
              sha: context.sha
            })

  #Setting next development version
  set_next_dev:
    runs-on: ubuntu-latest
    name: Set Next Development Version
    needs:
      - initialization
      - set_build_and_tag_release

    permissions:
      contents: write

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set Dev Version
        run: |
          mvn -B versions:set \
          -DnewVersion=${{needs.initialization.outputs.NEXT_SNAPSHOT_VERSION}} \
          -DgenerateBackupPoms=false

      # The GitHub Actions workflow will automatically use the existing  global user.name configuration set on the developer's machine for any Git operations within the workflow. No additional configuration is needed in the workflow YAML file.
      - name: Commit & Push
        run: |
          git config user.name ifeoluwanimie
          git config user.email onibokun_ifeoluwani@yahoo.com
          git add .
          git commit -m 'Set next dev version to ${{needs.initialization.outputs.NEXT_SNAPSHOT_VERSION}}'
          git push origin HEAD:main
          git push --tags origin

  # Creating a release
  create_release:
    name: Create Release
    permissions: write-all

    needs:
      - initialization
      - set_next_dev

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Modify Release Message
        if: env.RELEASE_MESSAGE == ''
        run: echo "RELEASE_MESSAGE=Release ${{needs.initialization.outputs.RELEASE_VERSION}}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{needs.initialization.outputs.RELEASE_VERSION}}
          release_name: Release ${{needs.initialization.outputs.RELEASE_VERSION}}
          body: |
            ${{env.RELEASE_MESSAGE}}
          draft: false
          prerelease: false